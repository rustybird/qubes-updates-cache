        qubes-updates-cache, a Squid-based package update cache

Updating my various templates was getting a little annoying with all the
redundant network traffic, so I set up a qubes-updates-cache modeled on
qubes-updates-proxy, using standalone Squid (no Apache etc. involved).


        Security considerations

1. For Tor users, the remote network has some insight about what's installed
   on the same physical computer, because there is no Tor circuit isolation
   between update requests from different clients. This can be prevented by
   waiting at least 10 minutes (or sending NEWNYM) between updating different
   clients. (The same is true of qubes-updates-proxy.)
2. The remote network can distinguish if a file is requested via qubes-updates-
   cache (Squid) or via qubes-updates-proxy (tinyproxy). The former's user base
   is smaller, making attacks (where valid signatures for malicious packages
   can be produced somehow) more targeted even over Tor, i.e. less likely to be
   detected.
3. Clients can determine if a package is installed on another client on the
   same physical computer by requesting it and measuring cache response time.
4. Preferably, qubes-updates-cache should be hosted on a separate ProxyVM only
   used by templates, not by template-based VMs: Otherwise, the only thing that
   prevents template-based VMs (which are more likely to be compromised than
   the templates themselves) from also launching attack (3) is the firewall
   rule denying access to the updates proxy port; but the Qubes firewall is not
   intended to be a security mechanism.


        Installation

Create a new ProxyVM (which currently cannot be Whonix based), ensure it has a
netvm, and enable the qubes-updates-cache service:

    [dom0] $ qvm-create --proxy --label red squidp
    [dom0] $ qvm-prefs --set squidp netvm default  # or sys-whonix etc.
    [dom0] $ qvm-service --enable squidp qubes-updates-cache

Copy this directory (containing the README you're reading) into your new
ProxyVM's template, carefully inspect its contents there and:

    [squidp's template] # dnf install squid  # or "apt-get install squid3"
    [squidp's template] # ./install
    [squidp's template] # poweroff

If squidp's netvm is torifying (e.g. sys-whonix), you can transparently rewrite
many repository URLs to .onion:

    [squidp] # mkdir -p /usr/local/etc/qubes-updates-cache/urls
    [squidp] # ln -s /etc/qubes-updates-cache/urls/10-onion.bash.EXAMPLE \
           /usr/local/etc/qubes-updates-cache/urls/10-onion.bash

If your Squid build's HTTPS support is disabled (Debian) or broken (Fedora 25),
you need to deactivate the rewrite-to-HTTPS rules:

    [squidp] # mkdir -p /usr/local/etc/qubes-updates-cache/urls
    [squidp] # >        /usr/local/etc/qubes-updates-cache/urls/20-https.bash

Make your new ProxyVM the netvm for each of the clients whose package updates
you want to cache (in this example, a Whonix workstation template), and ensure
connections to the updates cache (which uses the same IP:port as the non-
caching updates proxy) are allowed:

    [dom0] $ qvm-prefs --set whonix-ws netvm squidp
    [dom0] $ qvm-firewall whonix-ws --yum-proxy allow

Finally, for Whonix gateway/workstation clients, you currently need to bypass
the safety mechanism that checks for a torified update proxy:

    [dom0] $ qvm-service --enable whonix-ws whonix-secure-proxy

That's it! Up to 4 GiB of package updates will be cached to squidp's volatile
storage in /var/lib/qubes/vm-updates/. If you want to keep them across reboots:

    [squidp] # mkdir -p /rw/config/qubes-bind-dirs.d
    [squidp] # echo 'binds+=( /var/lib/qubes/vm-updates )' \
                    >/rw/config/qubes-bind-dirs.d/qubes-updates-cache.conf
